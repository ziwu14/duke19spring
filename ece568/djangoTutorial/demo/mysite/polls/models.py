# Create your models here.
from django.db import models
import datetime
from django.utils import timezone

'''
--Each model is represented by a class that subclasses django.db.db.modles.Model

--Each field is represented by an instance of a Field class (database fields, e.g.CharField, DateTimeField)

--The name of each Field instance is the field's name. You'll use this value in your
  Python code, and your database will use it as the column name (e.g. question_text, pub_data)

You can also use the (optional) 1st argument to a Field to designate a human-readable name. When this field isn't provided, Django will use the machine-readable name.(e.g. inthe following example, we've only defined a human-readable name for Question.pub_date. For all other fields in this model, the field's machine-readable name will suffice as its human-readable name)

'''
# Char, DateTime, Integer
class Question(models.Model):
    question_text = models.CharField(max_length=200)
    pub_date = models.DateTimeField('date published')
    def __str__(self):
        return self.question_text
    '''
    __str__() method is not only convenient here but also is used to represent object by 
    admin generated by Django
    '''
    def was_published_recently(self):
        now = timezone.now()
        return now - datetime.timedelta(days=1) <= self.pub_date <= now
    was_published_recently.admin_order_field = 'pub_date'
    was_published_recently.boolean = True
    was_published_recently.short_description = 'Published recently?'
    
class Choice(models.Model):
    # Foreignkey--to associate the Choice to a specific Question class i.e. define a relationship
    # NB: Django supports all common database relationship (1-to-1, multiple-to-1,multiple-to-multiple)
    question = models.ForeignKey(Question, on_delete=models.CASCADE)
    choice_text = models.CharField(max_length=200)
    votes = models.IntegerField(default=0)
    def __str__(self):
        return self.choice_text
